filter(padj <= 0.05)
mutation_specific_changes |>
as.data.frame() |>
filter(padj <= 0.05)
mutation_specific_changes <- addDirectionlabel(mutation_specific_changes)
mutation_specific_changes <- annot_data(mutation_specific_changes)
mutation_specific_changes <- mutation_specific_changes[!grepl('LOC', rownames(mutation_specific_changes)), ]
mutation_specific_changes
df = mutation_specific_changes
gene_list <- creategenelist(df)#  creatgenelist(treatment, analysis = 'other')
## Run fgsea
gse <- rungseondata(geneList = gene_list)
## To eliminate redundant terms, one can run simplify here
gse_simplifeid <- simplify(gse, cutoff=0.7,by="p.adjust",select_fun=min)
gse_simplifeid_dataframe <- as.data.frame(gse_simplifeid)
## Generate a dot plot here
dotplot(gse, showCategory = 10) +#, split = '.sign') +
#facet_grid(.~.sign) +
theme(axis.text.x =element_text(angle =45, hjust = 1),
axis.text.y = element_text(angle = 45, size = 10))
gse_simplifeid_dataframe
## Explore the loaded data here
head(countMatrix)
head(samples, 15)
setwd('/Users/gwk/Desktop/Bioinformatics/bulk-rnaseq-zebrafish-mouse-human/data')
dir()
## Split the data at this point to extract genotype specific reliable analysis
## This is mainly because, most of the
sample_info <- samples
head(sample_info)
row.names(sample_info) <- sample_info$Group
write.csv(samples,
file = './samplieinformation.csv')
write.csv(countMatrix,
file = './raw_count_matrix.csv')
sample_info |>
filter(Genotype == 'wt')
sample_info |>
filter(Genotype == 'mutant')
wt_sample_info <- sample_info |>
filter(Genotype == 'wt')
mut_sample_info <- sample_info |>
filter(Genotype == 'mutant')
countMatrix |>
select(row.names(wt_sample_info))
wt_sample_info <- sample_info |>
filter(Genotype == 'wt')
wtcountmtx <- countMatrix |>
select(row.names(wt_sample_info))
mut_sample_info <- sample_info |>
filter(Genotype == 'mutant')
mutcountmtx <- countMatrix |>
select(row.names(mut_sample_info))
dir()
## Wild type only datasets, see PCA sample clustering for more insight into this choice
ddswt <- DESeqDataSetFromMatrix(countData = as.matrix(wtcountmtx),
colData = wt_sample_info,
design = ~ Group)
keep <- rowSums(counts(ddswt)) >= 10
ddswt <- ddswt[keep,]
# Relevel the Wild type data here so the unexposed is the reference group
ddswt$Group <- relevel(ddswt$Group, ref = 'wt_unexposed')
## Perform some quality checks here. Use the developed function here. Input is the
## dds object and in some cases you need the sample_id as the function inputs expect
## check out the individual functions below in the environmnetal space
## calculate the pca values here
vsd <- vst(ddswt)
## Plot visualise the PCA
plotPCA(vsd, intgroup="Group")
wt_norm_data <- normalisation_func(ddswt)
ddswt <- DESeq(ddswt)
res <- results(ddswt)
res
summary(res)
resultsNames(dds)
resultsNames(ddswt)
## Maganese responsiveness changes
## These are changes seen when WT are exposed to Mn
treatment <- results(ddswt, name = "Group_wt_exposed_vs_wt_unexposed")
treatment <- lfcShrink(dds = dds, coef = 2, type = 'apeglm')
df = treatment
# Filter significant genes
sig_genes <- df %>%
filter(padj < 0.05 & diffExpression != "NO")
df = as.data.frame(treatment)
# Filter significant genes
sig_genes <- df %>%
filter(padj < 0.05 & diffExpression != "NO")
treatment <- addDirectionlabel(treatment)
interactions <- annot_data(interactions)
treatment <- annot_data(treatment)
treatment <- treatment[!grepl('LOC', rownames(treatment)), ]
df = as.data.frame(treatment)
summary(df)
# Filter significant genes
sig_genes <- df %>%
filter(padj < 0.05 & diffExpression != "NO")
# Define top genes
top10_up <- sig_genes %>%
arrange(desc(log2FoldChange)) %>%
head(10)
top20_up <- sig_genes %>%
arrange(desc(log2FoldChange)) %>%
head(20)
ggplot(df, aes(x = log2FoldChange, y = -log10(padj), color = diffExpression)) +
geom_point(alpha = 0.7) +
scale_color_manual(values = c("NS" = "grey", "Upregulated" = "firebrick", "Downregulated" = "steelblue")) +
geom_text_repel(data = top10_up, aes(label = symbols), size = 3, box.padding = 0.5, max.overlaps = 10) +
labs(title = "Figure 3.1: Volcano Plot",
x = "log2 Fold Change",
y = "-log10 Adjusted P-value") +
theme_minimal()
ggplot(top10_up, aes(x = reorder(symbols, log2FoldChange), y = log2FoldChange)) +
geom_col(fill = "firebrick") +
coord_flip() +
labs(title = "Figure 3.2: Top 10 Upregulated Genes",
x = "Gene",
y = "log2 Fold Change") +
theme_minimal()
mat <- matrix(top20_up$log2FoldChange, nrow = 1)
colnames(mat) <- top20_up$symbols
rownames(mat) <- "log2FC"
pheatmap(mat,
cluster_rows = FALSE,
cluster_cols = TRUE,
main = "Figure 3.3: Heatmap of Top 20 Upregulated Genes",
color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
volcanoPlot(df)
sig_genes
treatment
# This is the output folder for the final analysis
output_dir = '/Users/gwk/Desktop/Thesis Figures'
write.csv(treatment,
file = paste0(output_dir,'/mnExposureEffect/mnExposuredge.csv'))
gene_list <- creategenelist(df)#  creatgenelist(treatment, analysis = 'other')
## Run fgsea
gse <- rungseondata(geneList = gene_list)
gse
## To eliminate redundant terms, one can run simplify here
gse_simplifeid <- simplify(gse, cutoff=0.7,by="p.adjust",select_fun=min)
## Generate a dot plot here
dotplot(gse, showCategory = 10) +#, split = '.sign') +
#facet_grid(.~.sign) +
theme(axis.text.x =element_text(angle =45, hjust = 1),
axis.text.y = element_text(angle = 45, size = 10))
## Generate a dot plot here
dotplot(gse_simplifeid, showCategory = 10) +#, split = '.sign') +
#facet_grid(.~.sign) +
theme(axis.text.x =element_text(angle =45, hjust = 1),
axis.text.y = element_text(angle = 45, size = 10))
## Generate a dot plot here
dotplot(gse_simplifeid, showCategory = 10) +#, split = '.sign') +
facet_grid(.~.sign)
gse_simplifeid
## Create a heatmap
p1 <- heatplot(gse_simplifeid, showCategory = 2)
p2 <- heatplot(gse_simplifeid, foldChange = gene_list[1:10],
showCategory = 2)
## Combine the plots using cowplot grid function here
cowplot::plot_grid(p1, p2, ncol = 1, labels = LETTERS[1:2])
## create a GSEA plot
gseaplot(gse, by = 'all',title = gse$Description[1], geneSetID = 1)
set.seed(101)
## Mn exposure effectes
## GSEA Analysis
gene_list <- creategenelist(df)#  creatgenelist(treatment, analysis = 'other')
gse <- rungseondata(geneList = gene_list)
gse_simplifeid <- simplify(gse, cutoff=0.7,by="p.adjust",select_fun=min)
gse_simplifeid_dataframe <- as.data.frame(gse_simplifeid)
write.csv(gse_simplifeid_dataframe,
file = paste0(output_dir,'/mnExposureEffect/gseaanalysis.csv'))
gse_simplifeid_dataframe$Description
## Run KEGG Pathway analysis here
kegg_list <- creategenelist(df, analysis = 'other')
kegg_list
pont <- pathway_ont(gene_list, mode = 'gsea')
## Run KEGG Pathway analysis here
df |>
drop_na()
## Run KEGG Pathway analysis here
df |>
select(7,8,2)
## Run KEGG Pathway analysis here
df |>
select(7,8,2) |>
drop_na()
## Run KEGG Pathway analysis here
df2 <- df |>
select(7,8,2) |>
drop_na()
kegg_list <- creategenelist(df2, analysis = 'other')
pont <- pathway_ont(gene_list, mode = 'gsea')
kegg_list
pont
kegg_organism = "dre"
kk2 <- gseKEGG(geneList     = kegg_list,
organism     = kegg_organism,
nPerm        = 10000,
minGSSize    = 3,
maxGSSize    = 800,
pvalueCutoff = 0.05,
pAdjustMethod = "none",
keyType       = "ncbi-geneid")
kk2
dotplot(kk2, showCategory = 10, title = "Enriched Pathways" , split=".sign") + facet_grid(.~.sign)
emapplot(kk2)
kk_simplifeid <- simplify(kk, cutoff=0.7,by="p.adjust",select_fun=min)
kk_simplifeid <- simplify(kk2, cutoff=0.7,by="p.adjust",select_fun=min)
write.csv(kk2,
file = paste0(output_dir,'/mnExposureEffect/kegg_pathway_analysis.csv'))
dotplot(kk2, showCategory = 10)#, title = "Enriched Pathways" , split=".sign") + facet_grid(.~.sign)
## Zfin data
zfin <- read.delim("https://zfin.org/downloads/wildtype-expression_fish.txt",
sep = '\t', header = FALSE)
colnames(zfin) <- c('zfinid','X','genotype','v4','tissue','v6','v7',
'stage','stage_1','transcript','v11','v12','v13','v14','v15')
zfin <- zfin %>%
select(2,3,5,8)
## Merge the two dataframes here
df <- merge(x=df, y=zfin, by = 'X')
df
zfin
df
## Mutant only datasets, see PCA sample clustering for more insight into this choice
ddsmut <- DESeqDataSetFromMatrix(countData = as.matrix(mutcountmtx),
colData = mut_sample_info,
design = ~ Group)
keep <- rowSums(counts(ddsmut)) >= 10
ddsmut <- ddsmut[keep,]
ddsmut$Group <- relevel(ddsmut$Group, ref = 'mut_unexposed')
## Perform some quality checks here. Use the developed function here. Input is the
## dds object and in some cases you need the sample_id as the function inputs expect
## check out the individual functions below in the environmnetal space
## calculate the pca values here
vsd <- vst(ddsmut)
## Plot visualise the PCA
plotPCA(vsd, intgroup="Group")
mut_norm_data <- normalisation_func(ddsmut)
ddsmut <- DESeq(ddsmut)
res <- results(ddsmut)
res
summary(res)
resultsNames(ddsmut)
## Effect of mutation (wt_unexposed vs mutant unexposed)
mutation_specific_changes <- results(ddsmut, name = "Group_mut_exposed_vs_mut_unexposed")
mutation_specific_changes <- lfcShrink(ddsmut = dds, coef = 2, type = 'apeglm')
mutation_specific_changes <- addDirectionlabel(mutation_specific_changes)
mutation_specific_changes <- lfcShrink(dds = ddsmut, coef = 2, type = 'apeglm')
df = as.data.frame(mutation_specific_changes)
# Filter significant genes
sig_genes <- df %>%
filter(padj < 0.05 & diffExpression != "NO")
mutation_specific_changes <- addDirectionlabel(mutation_specific_changes)
mutation_specific_changes <- annot_data(mutation_specific_changes)
mutation_specific_changes <- mutation_specific_changes[!grepl('LOC', rownames(mutation_specific_changes)), ]
write.csv(mutation_specific_changes,
file = paste0(output_dir,'./mutant_mutant/mnExposuredge.csv'))
write.csv(mutation_specific_changes,
file = paste0(output_dir,'/mutant_mutant/mnExposuredge.csv'))
df = as.data.frame(mutation_specific_changes)
# Filter significant genes
sig_genes <- df %>%
filter(padj < 0.05 & diffExpression != "NO")
# Define top genes
top10_up <- sig_genes %>%
arrange(desc(log2FoldChange)) %>%
head(10)
top20_up <- sig_genes %>%
arrange(desc(log2FoldChange)) %>%
head(20)
ggplot(df, aes(x = log2FoldChange, y = -log10(padj), color = diffExpression)) +
geom_point(alpha = 0.7) +
scale_color_manual(values = c("NS" = "grey", "Upregulated" = "firebrick", "Downregulated" = "steelblue")) +
geom_text_repel(data = top10_up, aes(label = symbols), size = 3, box.padding = 0.5, max.overlaps = 10) +
labs(title = "Figure 3.1: Volcano Plot",
x = "log2 Fold Change",
y = "-log10 Adjusted P-value") +
theme_minimal()
ggplot(top10_up, aes(x = reorder(symbols, log2FoldChange), y = log2FoldChange)) +
geom_col(fill = "firebrick") +
coord_flip() +
labs(title = "Figure 3.2: Top 10 Upregulated Genes",
x = "Gene",
y = "log2 Fold Change") +
theme_minimal()
mat <- matrix(top20_up$log2FoldChange, nrow = 1)
colnames(mat) <- top20_up$symbols
rownames(mat) <- "log2FC"
pheatmap(mat,
cluster_rows = FALSE,
cluster_cols = TRUE,
main = "Figure 3.3: Heatmap of Top 20 Upregulated Genes",
color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
## Venn Diagram
set1 = sig_gene_names(treatment)
set2 <- sig_gene_names(mutation_specific_changes)
dgset <- list('Treatment' = set1,
'Mutation' = set2)
vPlot(dgset)
?ggvenn
set1
vPlot(dgset)
## Venn Diagram
set1 = sig_gene_names(treatment)
set2 <- sig_gene_names(mutation_specific_changes)
ggvenn(set1, set2)
dgset <- list('Treatment' = set1,
'Mutation' = set2)
vPlot(dgset)
dgset
ggvenn(dgset)
vPlot(dgset)
venPlot(dgeset = dgset)
signs <- sig_gene(treatment)
hmap <- data_heatmap(wt_norm_data)
hmap <- data_heatmap(wt_norm_data,wt_sample_info)
hmap
figure_heatmap(hmap, signs)
signs
## Generate a heatmap here
signs <- sig_gene(treatment)
hmap <- data_heatmap(wt_norm_data,wt_sample_info)
figure_heatmap(hmap, signs)
hmap <- data_heatmap(as.data.frame(wt_norm_data),wt_sample_info)
figure_heatmap(hmap, signs)
Heatmap(hmap)
hmap(rownames(signs),)
hmap[rownames(signs),]
rownames(signs)
hmap
hmap[rownames(signs),]
rownames(signs)
hmap['kif4',]
## Generate a heatmap here
signs <- sig_gene(treatment)
hmap[signs,]
hmap[row.names(signs),]
hmap[rownames(signs),]
hmap[c(rownames(signs)),]
valid_rows <- intersect(rownames(signs), rownames(hmap))
hmap[valid_rows,]
## Plot a heatMap using this function
#' Plot Heatmap
#'
#' @description
#' This function plots a heatmap
#'
#' @params: data_frame: a matrix of normalised counts with the rownames set to the gene names
#'          signs: a dataframe of selected gens from the DGE analysis
#'
figure_heatmap <- function(data_frame, sigs){
valid_rows <- intersect(rownames(sigs), rownames(data_frame))
plot1 <- Heatmap(data_frame[valid_rows,], name = "Z - Score", row_km = 2, column_km = 2,row_labels = rownames(sigs),
column_labels = colnames(data_frame),
#top_annotation = HeatmapAnnotation(data_frame = 1:dim(data_frame)[2]) #, bar1 = anno_points(runif(dim(data_frame)[2]))),
#right_annotation = rowAnnotation(data_frame = dim(data_frame[rownames(signs),])[1]:1,
#                                  bar2 = anno_barplot(runif(dim(data_frame[rownames(signs),])[1])))
)
return(plot1)
}
figure_heatmap(hmap, signs)
## Generate a heatmap here
signs <- sig_gene(treatment)
hmap <- data_heatmap(as.data.frame(wt_norm_data),wt_sample_info)
figure_heatmap(hmap, signs)
## Plot a heatMap using this function
#' Plot Heatmap
#'
#' @description
#' This function plots a heatmap
#'
#' @params: data_frame: a matrix of normalised counts with the rownames set to the gene names
#'          signs: a dataframe of selected gens from the DGE analysis
#'
figure_heatmap <- function(data_frame, sigs){
valid_rows <- intersect(rownames(sigs), rownames(data_frame))
plot1 <- Heatmap(data_frame[valid_rows,], name = "Z - Score", row_km = 2, column_km = 2,row_labels = valid_rows,
column_labels = colnames(data_frame),
#top_annotation = HeatmapAnnotation(data_frame = 1:dim(data_frame)[2]) #, bar1 = anno_points(runif(dim(data_frame)[2]))),
#right_annotation = rowAnnotation(data_frame = dim(data_frame[rownames(signs),])[1]:1,
#                                  bar2 = anno_barplot(runif(dim(data_frame[rownames(signs),])[1])))
)
return(plot1)
}
figure_heatmap(hmap, signs)
volcanoPlot(mutation_specific_changes)
volcanoPlot(mutation_specific_changes, xlimlimit = c(-2.5, 8), ylimlimit = c(0, 15))
# Build a DESeq2 object here. The count data is given as a metrix, column names
# are the samples and the rownames are the Ensemble gene ids. This is important
# The design contains what makes up the model (negatve bionimial model in this case)
dds <- DESeqDataSetFromMatrix(countData = as.matrix(countMatrix),
colData = samples,
design = ~ Group)
##Although filtering with DESeq is not reccomended, here we remove all genes whose
## row sum is less than 10
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
## Relevel the conditions here
dds$Group <- relevel(dds$Group, ref = 'wt_unexposed')
## Perform differenPC10## Perform differential gene expression analysis here
dds <- DESeq(dds)
res <- results(dds)
res
summary(res)
resultsNames(dds)
## Interaction between treatment and genotype
## These are comparing unexposed WT with exposed mutations
interactions <- results(dds, name = "Group_mut_exposed_vs_wt_unexposed")
interactions <- lfcShrink(dds = dds, coef = 2, type = 'apeglm')
interactions <- addDirectionlabel(interactions)
interactions <- annot_data(interactions)
interactions <- interactionss[!grepl('LOC', rownames(interactions)), ]
interactions <- interactions[!grepl('LOC', rownames(interactions)), ]
volcanoPlot(interactions)#, xlimlimit = c(-2.5, 8), ylimlimit = c(0, 15))
write.csv(interactions,
file = paste0(output_dir,'/mutant_mutant/mutExposedwtUnexposed.csv'))
write.csv(interactions,
file = paste0(output_dir,'/mutant_mutant/mutExposedwtUnexposed.csv'))
## Relevel the conditions here
#dds$Group <- relevel(dds$Group, ref = 'wt_unexposed')
dds$Group <- relevel(dds$Group, ref = 'mut_unexposed')
## Perform differenPC10## Perform differential gene expression analysis here
dds <- DESeq(dds)
res <- results(dds)
res
summary(res)
resultsNames(dds)
## These are comparing unexposed WT with exposed mutations
mutationOnly <- results(dds, name = "Group_wt_unexposed_vs_mut_unexposed")
mutationOnly <- lfcShrink(dds = dds, coef = 2, type = 'apeglm')
mutationOnly <- addDirectionlabel(mutationOnly)
mutationOnly <- annot_data(mutationOnlys)
mutationOnly <- annot_data(mutationOnly)
mutationOnly <- mutationOnly[!grepl('LOC', rownames(mutationOnly)), ]
write.csv(mutationOnly,
file = paste0(output_dir,'/mutantEffects/mutunexposedwtUnexposed.csv'))
volcanoPlot(mutationOnly)#, xlimlimit = c(-2.5, 8), ylimlimit = c(0, 15))
volcanoPlot(mutationOnly, xlimlimit = c(-8, 8), ylimlimit = c(0, 15))
set3 <- sig_gene_names(mutationOnly)
dgset <- list('Treatment' = set3,
'Mutation' = set2)
venPlot(dgeset = dgset)
## Mn exposure effectes
## GSEA Analysis
df = mutationOnly
gene_list <- creategenelist(df)#  creatgenelist(treatment, analysis = 'other')
gse <- rungseondata(geneList = gene_list)
gse_simplifeid <- simplify(gse, cutoff=0.7,by="p.adjust",select_fun=min)
gse_simplifeid_dataframe <- as.data.frame(gse_simplifeid)
write.csv(gse_simplifeid_dataframe,
file = paste0(output_dir,'/mutantEffects/gseaanalysis.csv'))
## Run KEGG Pathway analysis here
df2 <- df |>
select(7,8,2) |>
drop_na()
kegg_list <- creategenelist(df2, analysis = 'other')
kegg_organism = "dre"
kk2 <- gseKEGG(geneList     = kegg_list,
organism     = kegg_organism,
nPerm        = 10000,
minGSSize    = 3,
maxGSSize    = 800,
pvalueCutoff = 0.05,
pAdjustMethod = "none",
keyType       = "ncbi-geneid")
dotplot(kk2, showCategory = 10)#, title = "Enriched Pathways" , split=".sign") + facet_grid(.~.sign)
emapplot(kk2)
write.csv(kk2,
file = paste0(output_dir,'/mmutantEffects/kegg_pathway_analysis.csv'))
write.csv(kk2,
file = paste0(output_dir,'/mutantEffects/kegg_pathway_analysis.csv'))
## Mn exposure effectes
## GSEA Analysis
df = interatcion
## Mn exposure effectes
## GSEA Analysis
df = interactions
gene_list <- creategenelist(df)#  creatgenelist(treatment, analysis = 'other')
gse <- rungseondata(geneList = gene_list)
gse
gse_simplifeid <- simplify(gse, cutoff=0.7,by="p.adjust",select_fun=min)
gse_simplifeid
write.csv(gse_simplifeid_dataframe,
file = paste0(output_dir,'/mnmutInteraction/gseaanalysis.csv'))
## Run KEGG Pathway analysis here
df2 <- df |>
select(7,8,2) |>
drop_na()
kegg_list <- creategenelist(df2, analysis = 'other')
kegg_organism = "dre"
kk2 <- gseKEGG(geneList     = kegg_list,
organism     = kegg_organism,
nPerm        = 10000,
minGSSize    = 3,
maxGSSize    = 800,
pvalueCutoff = 0.05,
pAdjustMethod = "none",
keyType       = "ncbi-geneid")
kk2
write.csv(kk2,
file = paste0(output_dir,'/mnmutInteraction/kegg_pathway_analysis.csv'))
dotplot(kk2, showCategory = 10)#, title = "Enriched Pathways" , split=".sign") + facet_grid(.~.sign)
emapplot(kk2)
write.csv(interactions,
file = paste0(output_dir,'/mnmutInteraction/mutExposedwtUnexposed.csv'))
## Generate a heatmap here
signs <- sig_gene(treatment)
hmap <- data_heatmap(as.data.frame(wt_norm_data),wt_sample_info)
figure_heatmap(hmap, signs)
figure_heatmap(hmap[:100,], signs)
hmap <- data_heatmap(as.data.frame(wt_norm_data),wt_sample_info)[1:100,]
figure_heatmap(hmap, signs)
